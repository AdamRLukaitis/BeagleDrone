{"name":"Beagledrone","tagline":"A BeagleBone based drone using 'bare metal' C","body":"BeagleDrone\r\n==============\r\n\r\nAn Open Source drone based on the BeagleBone (black).\r\n\r\n[![Build Status](https://travis-ci.org/greghaynes/BeagleDrone.png)](https://travis-ci.org/greghaynes/BeagleDrone)\r\n\r\n## Why\r\n\r\nRobotics projects, specifically drones, often need far more memory than a\r\ntypical microcontroller can offer. This is often solved by using a second\r\ncomputer running a full modern operating system (such as linux). This causes a\r\nmassive gain in complexity in both hardware in software.\r\n\r\nAn alternative solution is to develop the drone control code on a powerful\r\nenough platform that only one computer is needed. This is generally avoided\r\ndue to the difficulty of building up a code base for modern powerful computers.\r\n\r\nThe BeagleDrone is a drone which runs on the BeagleBone platforms (original and\r\nblack). This allows for modern state estimation, tons of peripherals, and \r\nboundless hacking potential without the need for a second computer, or even a\r\nsecond code base.\r\n\r\n## Communication\r\n\r\nWe primarily communicate on irc in #beagledrone @ freenode. Please join in at\r\nany time!\r\n\r\n## Ticket Tracker\r\n\r\nOpen tickets can be found at https://github.com/greghaynes/BeagleDrone/issues?state=open\r\n\r\nFeel free to create tickets if you run into problems or would like to request\r\na feature. Alternatively, join us in IRC (see above) to discuss a potential\r\nticket.\r\n\r\n\r\n# Firmware\r\n\r\nThe firmware directory contains the code which runs on the beagleboard.\r\n\r\n## Dependencies\r\n\r\nYou require make and an gcc eabi arm cross compiler toolchain to build this\r\nproject. Although any method of obtaining the arm-eabi will work equally well,\r\nbelow are the recommended methods for obtaining the toolchain.\r\n\r\n## Toolchain\r\n\r\nPlease visit https://launchpad.net/gcc-arm-embedded to obtain an arm toolchain\r\nfor your platform. Ubuntu users may want to instead visit\r\nhttps://launchpad.net/~terry.guo/+archive/gcc-arm-embedded for a package\r\ninstallation.\r\n\r\n## Building\r\n\r\nTo build the package make sure the arm-none-eabi-\\* tools are in your PATH.\r\n\r\nRunning the command `make` will create a boot.bin, suitable for flashing\r\n\r\n\r\n## Flashing\r\n\r\nI have yet to find a pleasant method for flashing. Currently, I use an SD card\r\nwith U-Boot (comes on standard beaglebone linux image). I run the `loady`\r\ncommand at the U-Boot prompt, and use yterminal protocol (via minicom) to\r\nsend the boot.bin. I then execute `go 0x82000000` to run the binary.\r\n\r\n## Testing\r\n\r\nChange directory into firmware/tests. Run 'make'.\r\n\r\n# Client\r\n\r\nThe client is run on a PC and can be used to communicated with the drone.\r\n\r\n## Dependencies\r\n\r\nQt5, g++ and CMake are required to build and run the client;\r\n\r\n## Building\r\n\r\nTo build the client run the following commands\r\n\r\n`cd client; cmake .; make`\r\n","google":"UA-46835189-1","note":"Don't delete this file! It's used internally to help with page regeneration."}